package designmodel.proxy;


/**
 *  代理模式: 它在不改变原有类的情况下, 引入代理类来给原始类附加功能。
 *
 *  静态代理：
 *      1）通过继承被代理，在需要的地方硬编码增强功能。特点：每一个需要代理的类都需要创建对应的代理类。
 *      2）被代理类和代理类都实现同一接口，然后代理类中组合一个被代理对象，代理类委托被代理类执行原来的工作，
 *          在委托对象执行工作前后可以添加增强。
 *  动态代理：
 *      1） 通过实现Invacation 接口， 重写invoke 方法
 *      2） CGlib 的动态代理。
 *
 *   如果原始类没有定义接口，并且原始类代码并不是我们开发（比如来自第三方库），我们没法直接修改原始类。
 *
 *   这种情况下，我们使用外部类扩展。  1）继承 2）动态代理
 *
 *
 */

public class WhyProxy {

}
