package jmm;

/**
 * 一 什么是java内存模型？
 *
 *  java内存模型是一组规范，对于不同的jvm都需要遵循的规范，已实现java在不同cpu中执行多线程，
 *  都是能得到预期的结果。
 *
 *  jmm是工具类和关键字的原理。
 *  volatile, synchronized, Lock
 *
 * 二： 什么是重排序？
 * 代码指令并不是严格按照代码语句顺序执行，它们的执行顺序被改变了
 *
 * 三： 重排序的好处：提高处理速度。
 * 1，编译器优化：包括jvm,JIT编译器等
 * 2，cpu指令重排
 * 3. 内存的“重排序”：线程A的修改B且看不到，引出可见性问题
 *
 * 四：什么是可见性问题？
 *    cpu有多级缓存，导致读的数据过期。
 *
 * 五：什么是主内存和本地内存？
 *  jvm 将多级缓存抽象成本地内存。
 *
 *  所有的共享变量存在于主内存中，每个线程都有自己的本地内存，而且线程读写共享数据也是通过本地内存交换的
 *  所以才导致了可见性问题。
 *
 * 六： 什么是Happens-Before原则
 *
 * happens-before 规则是用来解决可见性问题，一个操作happens-before于另外一个操作，那么第一个
 * 操对于第二个操作是可见的。
 *
 * 七：happens-before规则有哪些
 * 1.单线程规则， 后面的语句一定可见强面的语句。
 * 2.锁操作， 在解锁之间的所有操作，对于加锁后是可见的。
 * 3.volatile 变量。 写线程的操作的操作，一定会被它之后的读线程可见的。
 * 4. 线程启动，
 * 5. 线程join
 * 6. 工具类的happens-before
 *
 *
 *
 *
 */

public class WhatJMM {
}
